version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api-gateway:3001
      - NEXT_PUBLIC_WS_URL=ws://api-gateway:3001
    depends_on:
      - api-gateway
    networks:
      - app-network

  # API Gateway
  api-gateway:
    build:
      context: ../services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # User Service
  user-service:
    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
    networks:
      - app-network

  # AI Engine
  ai-engine:
    build:
      context: ../services/ai-engine
      dockerfile: ../../docker/Dockerfile.ai-engine
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
    volumes:
      - ai-models:/app/models
    depends_on:
      - redis
    networks:
      - app-network

  # Content Engine
  content-engine:
    build:
      context: ../services/content-engine
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - AI_ENGINE_URL=http://ai-engine:8001
    depends_on:
      - postgres
      - ai-engine
    networks:
      - app-network

  # Assessment Engine
  assessment-engine:
    build:
      context: ../services/assessment-engine
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - AI_ENGINE_URL=http://ai-engine:8001
    depends_on:
      - postgres
      - ai-engine
    networks:
      - app-network

  # Analytics Service
  analytics-service:
    build:
      context: ../services/analytics-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - CLICKHOUSE_URL=${CLICKHOUSE_URL}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - clickhouse
    networks:
      - app-network

  # Databases
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ports:
      - "8123:8123"
    networks:
      - app-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  # Monitoring
  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:
  clickhouse-data:
  rabbitmq-data:
  ai-models:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge
